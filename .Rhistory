plot(uk,puk,main='Holtwinters : additif saisonnier')
#
uk=HoltWinters(USAccDeaths,.15, .05, .04,seasonal="multiplicative") ## Holtwinters (multiplicatif saisonnier) : paramètres choisis
puk=predict(uk, 24, prediction.interval = F)
plot(uk,puk,main='Holtwinters : multiplicatif saisonnier')
par(mfrow=c(1,1))
par(mfrow=c(2,2))
uk=HoltWinters(USAccDeaths) ## Holtwinters (additif saisonnier) : tous les paramètres estimés
puk=predict(uk, 24, prediction.interval = F)
plot(uk,puk,main='Holtwinters : additif saisonnier')
#
ukk=HoltWinters(USAccDeaths, seasonal="multiplicative") ## Holtwinters (multiplicatif saisonnier) : paramètres estimés
pukk=predict(ukk, 24, prediction.interval = F)
plot(ukk,pukk,main='Holtwinters : multiplicatif saisonnier')
#
uk=HoltWinters(USAccDeaths,alpha=.15, beta=.05, gamma=.04) ## Holtwinters (additif saisonnier) :  paramètres choisis
puk=predict(uk, 24, prediction.interval = F)
plot(uk,puk,main='Holtwinters : additif saisonnier')
#
uk=HoltWinters(USAccDeaths,.15, .05, .04,seasonal="multiplicative") ## Holtwinters (multiplicatif saisonnier) : paramètres choisis
puk=predict(uk, 24, prediction.interval = F)
plot(uk,puk,main='Holtwinters : multiplicatif saisonnier')
par(mfrow=c(1,1))
par(mfrow=c(1,1))
x <- numeric()
xx <- numeric()
x[1] <- rnorm(1,0,1)
for (i in 2:1000)
{
x[i] <-.5*x[i-1]+rnorm(1,0,1)
}
xx <- x[801:1000]
xx # Valeurs de la série
plot.ts(xx,main='AR(1)',col="green") ## construction du chronogramme
par(mfrow=c(1,1))
e=rnorm(200)
e0=rnorm(1)
x <- numeric()
x[1] <-.5*e0+e[1]
for (i in 2:200)
{
x[i] <-.5*e[i-1]+e[i]
}
x # Valeurs de la série
plot.ts(x,main='MA(1)',col="red") ## construction du chronogramme
par(mfrow=c(2,2))
x = numeric()
xx =numeric()
x[1] = rnorm(1,0,1)
for (i in 2:1000)
{
x[i] <-.5*x[i-1]+rnorm(1,0,1)
}
xx = x[801:1000]
pxx =acf(xx,lag.max=40,main="ACF d'un AR(1)",col='blue',plot=T)   ## construction des ACF et PACF
ppxx <- pacf(xx,lag.max=40,main="PACF d'un AR(1)",col='green',plot=T)
e=rnorm(200)
e0=rnorm(1)
x <- numeric()
x[1] <-.5*e0+e[1]
for (i in 2:200)
{
x[i] <-.5*e[i-1]+e[i]
}
x
pxx =acf(x,lag.max=40,main="ACF d'un MA(1)",col='blue',plot=T)
ppxx <- pacf(x,lag.max=40,main="PACF d'un MA(1)",col='green',plot=T) ## construction des ACF et PACF
par(mfrow=c(2,1))
x = numeric()
xx =numeric()
x[1] = rnorm(1,0,1)
for (i in 2:1000)
{
x[i] <-x[i-1]+rnorm(1,0,1)
}
xx = x[801:1000]
pxx =acf(xx,lag.max=40,main="ACF d'un proc. non-stationnaire",col='blue',plot=T) ##construction de l'ACF d'un proc. non-stationaire
ppxx <- acf(USAccDeaths,lag.max=40,main="ACF d'une série périodique",col='green',plot=T) ##construction des ACF de la série USAccDeaths
#### Exemple 1
### On veut simuler 200 observations suivant un ARMA(2,2) de BB gaussien d'écart-type 0.23,
### avec pour coefficients de la partie AR (-0.75, 0.58) et (-0.345, 0.419) pour la partie MA. On fera :
ts.sim=arima.sim(n = 200, list(ar = c(0.75, -0.58), ma = c(-0.345, 0.419)),sd = 0.23)
par(mfrow=c(3,1)) ## Pour faire apparaître dans la même fenêtre, en ligne, 3 graphiques : Chronogramme, ACF et PACF
plot.ts(ts.sim,main="ARMA(2,2) de BB gaussien d'écart-type 0.23",col="darkgreen")
acf(ts.sim,lag.max=40,main="ACF d'un ARMA(2,2) de BB gaussien, d'écart-type 0.23",col='blue',plot=T)
pacf(ts.sim,lag.max=40,main="PACF d'un ARMA(2,2) de BB gaussien, d'écart_type 0.23",col='green',plot=T)
### On veut simuler 200 observations suivant un ARMA(2,2) de BB gaussien d'écart-type 0.23,
### avec pour coefficients de la partie AR (-0.75, 0.58) et (-0.345, 0.419) pour la partie MA. On fera :
ts.sim=arima.sim(n = 200, list(ar = c(0.75, -0.58), ma = c(-0.345, 0.419)),sd = 0.23)
par(mfrow=c(3,1)) ## Pour faire apparaître dans la même fenêtre, en ligne, 3 graphiques : Chronogramme, ACF et PACF
plot.ts(ts.sim,main="ARMA(2,2) de BB gaussien d'écart-type 0.23",col="darkgreen")
acf(ts.sim,lag.max=40,main="ACF d'un ARMA(2,2) de BB gaussien, d'écart-type 0.23",col='blue',plot=T)
pacf(ts.sim,lag.max=40,main="PACF d'un ARMA(2,2) de BB gaussien, d'écart_type 0.23",col='green',plot=T)
ts.sim=arima.sim(n = 200, list(ar = c(0.75, -0.58), ma = c(-0.345, 0.419)),rand.gen = function(n, ...) rt(n, df = 5))
par(mfrow=c(1,3)) ## Pour faire apparaître dans la même fenêtre, en colonnes, 3 graphiques : Chronogramme, ACF et PACF
plot.ts(ts.sim,main='ARMA(2,2) de BB de Student à 5 ddl',col="darkgreen")
acf(ts.sim,lag.max=40,main="ACF d'un ARMA(2,2) de BB de Student à 5 ddl",col='darkblue',plot=T)
pacf(ts.sim,lag.max=40,main="PACF d'un ARMA(2,2) de BB de Student à 5 ddl",col='darkblue',plot=T)
### I - Estimation dans les modèles autorégressifs
## 4 méthodes d'estimation des AR : burg, moindres carrés ordinaires (ols),
## maximum de vraisemblance (mle), Yule-Walker (yw)
##
### On simule 2000 observations suivant un AR (2) gaussien avec un BB centré réduit,
### pour simplifier, avec pour coefficients de la partie AR (-0.5, 0.8) :
ts.sim=arima.sim(n = 2000, list(ar = c(0.5, -0.8), ma = c(0, 0)),sd = 1)
ar1=ar(ts.sim)  ## Méthode par défaut= yule-walker=yw
ar1
ar2=ar(ts.sim,aic=T,method="burg",order=2)
ar2
ar3=ar(ts.sim,aic=T,method="ols",order=2)
ar3
ar4=ar(ts.sim,aic=T,method="mle",order=2)
ar4
ar5=ar(ts.sim,aic=T,method="yw",order=2)
ar5
### I - Estimation dans les modèles autorégressifs
## 4 méthodes d'estimation des AR : burg, moindres carrés ordinaires (ols),
## maximum de vraisemblance (mle), Yule-Walker (yw)
##
### On simule 2000 observations suivant un AR (2) gaussien avec un BB centré réduit,
### pour simplifier, avec pour coefficients de la partie AR (-0.5, 0.8) :
ts.sim=arima.sim(n = 2000, list(ar = c(0.5, -0.8), ma = c(0, 0)),sd = 1)
ar1=ar(ts.sim)  ## Méthode par défaut= yule-walker=yw
ar1
ar2=ar(ts.sim,aic=T,method="burg",order=2)
ar2
ar3=ar(ts.sim,aic=T,method="ols",order=2)
ar3
ar4=ar(ts.sim,aic=T,method="mle",order=2)
ar4
ar5=ar(ts.sim,aic=T,method="yw",order=2)
ar5
### On simule 5000 observations suivant un AR (2) gaussien avec un BB centré réduit, pour simplifier,
### avec pour coefficients de la partie AR (-0.5, 0.8) :
ts.sim=arima.sim(n = 5000, list(ar = c(0.5, -0.8), ma = c(0, 0)),sd = 1)
ar1=ar(ts.sim)  ## Méthode par défaut= yule-walker=yw
ar1
ar2=ar(ts.sim,aic=T,method="burg",order=2)
ar2
ar3=ar(ts.sim,aic=T,method="ols",order=2)
ar3
ar4=ar(ts.sim,aic=T,method="mle",order=2)
ar4
ar5=ar(ts.sim,aic=T,method="yw",order=2)
ar5
### On simule 10000 observations suivant un AR (2) gaussien avec un BB centré réduit, pour simplifier,
### avec pour coefficients de la partie AR (-0.5, 0.8) :
ts.sim=arima.sim(n = 10000, list(ar = c(0.5, -0.8), ma = c(0, 0)),sd = 1)
ar1=ar(ts.sim)  ## Méthode par défaut= yule-walker=yw
ar1
ar2=ar(ts.sim,aic=T,method="burg",order=2)
ar2
ar3=ar(ts.sim,aic=T,method="ols",order=2)
ar3
ar4=ar(ts.sim,aic=T,method="mle",order=2)
ar4
ar5=ar(ts.sim,aic=T,method="yw",order=2)
ar5
## Méthode d'estimation : maximum de vraisemblance
ts.sim=arima.sim(n = 1000, list(ar = c(0.5, -0.8), ma = c(-.25, 0.55)),sd = 1) ## Simulation des observations
arima1=arima(ts.sim,order=c(2,0,2))     ### Ajustement des observations simulées à un ARIMA(2,0,2)=ARMA(2,2)
arima1                                  ### Résultats de l'ajustement : estimation des paramètres etc..
par(mfrow=c(2,2))
### Validation des modèles : test des résidus
bp <- Box.test (arima1$resid, lag = 1, type="Box-Pierce") ## Test de Box-Pierce
bp
lb <- Box.test (arima1$resid, lag = 1, type="Ljung-Box")  ## Test de Ljung-Box
lb
acff <- acf(arima1$resid,lag.max=40, type="correlation",plot=T) ## Calcul et construction des ACF
pacff <- acf(arima1$resid,lag.max=40, type="partial",plot=T)    ## Calcul et construction des PACF
hist(arima1$resid)          ### Construction de l'histogramme des observations
plot(density(arima1$resid)) ### Construction de l'estimateur à noyau de la densité (de la loi stationnaire)
shapiro.test(arima1$resid)
ts.sim=arima.sim(n = 4000, list(ar = c(0.5, -0.8), ma = c(-.25, 0.55)),sd = 1)
arima1=arima(ts.sim,order=c(2,0,2))
arima1
par(mfrow=c(2,2))
### Validation des modèles : test des résidus
bp <- Box.test (arima1$resid, lag = 1, type="Box-Pierce")
bp
lb <- Box.test (arima1$resid, lag = 1, type="Ljung-Box")
lb
acff <- acf(arima1$resid,lag.max=40, type="correlation",plot=T)
pacff <- acf(arima1$resid,lag.max=40, type="partial",plot=T)
hist(arima1$resid)
plot(density(arima1$resid))
shapiro.test(arima1$resid)
### On simule 5000 observations suivant un ARMA(2,2) gaussien avec un BB centré réduit, pour simplifier,
### avec pour coefficients de la partie AR (-0.5, 0.8) et de la partie MA (-0.25,0.55):
ts.sim=arima.sim(n = 5000, list(ar = c(0.5, -0.8), ma = c(-.25, 0.55)),sd = 1) ## Méthode d'estimation = Max de vrais dont l'algo est initialisé par la méthode de la somme des carrés=sorte de moindre carrés
arima1=arima(ts.sim,order=c(2,0,2))
arima1
par(mfrow=c(2,2))
### Validation des modèles : test des résidus
bp <- Box.test (arima1$resid, lag = 1, type="Box-Pierce")
bp
lb <- Box.test (arima1$resid, lag = 1, type="Ljung-Box")
lb
acff <- acf(arima1$resid,lag.max=40, type="correlation",plot=T)
pacff <- acf(arima1$resid,lag.max=40, type="partial",plot=T)
hist(arima1$resid)
plot(density(arima1$resid))
shapiro.test(arima1$resid)
ts.sim(arima.sim(list(order = (2,1,2), ar = c(0.4, 0.3), ma=c(-.25, 0.15))))
ts.sim <- arima.sim(list(order=c(2,1,2),ar=c(0.4, -0.3),ma=c(-.25,.15),
seasonal=list(order=c(1,1,0),ar=0.3, period=3)),n = 1000, sd=1)
ts.plot(ts.sim)
ts.sim(arima.sim(list(order = (2,1,2), ar = c(0.4, 0.3), ma=c(-.25, 0.15))))
ts.sim <- arima.sim(list(order=c(2,1,2),ar=c(0.4, -0.3),ma=c(-.25,.15),
seasonal=list(order=c(1,1,0),ar=0.3, period=3)),n = 1000, sd=1)
ts.plot(ts.sim)
ts.sim(arima.sim(list(order = (2,1,2), ar = c(0.4, 0.3), ma=c(-.25, 0.15))))
ts.sim <- arima.sim(list(order=c(2,1,2),ar=c(0.4, -0.3),ma=c(-.25,.15),
seasonal=list(order=c(1,1,0),ar=0.3, period=3)),n = 1000, sd=1)
ts.plot(ts.sim)
ts.sim(arima.sim(list(order = (2,1,2), ar = c(0.4, 0.3), ma=c(-.25, 0.15))))
ts.sim <- arima.sim(list(order=c(2,1,2),ar=c(0.4, -0.3),ma=c(-.25,.15),
seasonal=list(order=c(1,1,0),ar=0.3, period=3)),n = 1000, sd=1)
ts.plot(ts.sim)
ts.sim(arima.sim(list(order = (2,1,2), ar = c(0.4, 0.3), ma=c(-.25, 0.15))))
ts.sim <- arima.sim(list(order=c(2,1,2),ar=c(0.4, -0.3),ma=c(-.25,.15),
seasonal=list(order=c(1,1,0),ar=0.3, period=3)),n = 1000, sd=1)
ts.plot(ts.sim)
ts.sim(arima.sim(list(order = (2,1,2), ar = c(0.4, 0.3), ma=c(-.25, 0.15))))
ts.sim <- arima.sim(list(order=c(2,1,2),ar=c(0.4, -0.3),ma=c(-.25,.15),
seasonal=list(order=c(1,1,0),ar=0.3, period=3)),n = 1000, sd=1)
ts.plot(ts.sim)
ts.sim(arima.sim(list(order = (2,1,2), ar = c(0.4, 0.3), ma=c(-.25, 0.15))))
ts.sim <- arima.sim(list(order=c(2,1,2),ar=c(0.4, -0.3),ma=c(-.25,.15),
seasonal=list(order=c(1,1,0),ar=0.3, period=3)),n = 1000, sd=1)
ts.plot(ts.sim)
shiny::runApp('R/Visualisation/Project Visualisation')
runApp('R/Visualisation/Project Visualisation')
runApp('R/Visualisation/Project Visualisation')
runApp('R/Visualisation/Project Visualisation')
MyDat <- read.csv("C:\Users\ZENBOOK\Documents\R\Visualisation\BreastTissue.csv")
MyDat <- read.csv("C:\Users\ZENBOOK\Documents\R\Visualisation\BreastTissue.csv")
MyDat <- read.csv("C:\\Users\\ZENBOOK\\Documents\\R\\Visualisation\\BreastTissue.csv")
library("readxl")
MyDat <- read_excel("C:\\Users\\ZENBOOK\\Documents\\R\\Visualisation\\BreastTissue.xls")
MyDat
MyDat <- read.csv("C:\\Users\\ZENBOOK\\Documents\\R\\Visualisation\\iris")
MyDat <- read.csv("C:\\Users\\ZENBOOK\\Documents\\R\\Visualisation\\iris.csv")
MyDat
MyDat <- read.csv("C:\\Users\\ZENBOOK\\Documents\\R\\Visualisation\\iris.csv", header = FALSE)
MyDat
MyDat.head()
head(MyDat)
runApp('R/Visualisation/Project Visualisation')
summary(MyDat)
summary.data.frame(MyDat)
runApp('R/Visualisation/Project Visualisation')
MyDat <- MyDat_1[-1,]
MyDat <- MyDat_1[-1,]
MyDat_1 <- read.csv("C:\\Users\\ZENBOOK\\Documents\\R\\Visualisation\\iris.csv", header = FALSE)
MyDat <- MyDat_1[-1,]
runApp('R/Visualisation/Project Visualisation')
MyDat$V1
MyDat$V2
Mydat <- read.table("C:\\Users\\ZENBOOK\\Documents\\R\\Visualisation\\crx", header = FALSE, sep = ",", dec = ".")
Mydat <- read.table("C:\\Users\\ZENBOOK\\Documents\\R\\Visualisation\\crx.txt", header = FALSE, sep = ",", dec = ".")
Mydat <- read.delim("C:\\Users\\ZENBOOK\\Documents\\R\\Visualisation\\crx.txt", header = FALSE, sep = ",", dec = ".")
MyDat_1 <- read.csv("C:\\Users\\ZENBOOK\\Documents\\R\\Visualisation\\crx.csv", header = FALSE)
MyDat_1
head(MyDat_1)
MyDat <- MyDat_1[-1,]
head(MyDat)
runApp('R/Visualisation/Project Visualisation')
MyDat
runApp('R/Visualisation/Project Visualisation')
runApp()
runApp('R/Visualisation/Project Visualisation')
runApp()
runApp('R/Visualisation/Project Visualisation')
summary(MyDat[[V1]])
summary(MyDat[["V1"]])
summary(MyDat)
runApp('R/Visualisation/Project Visualisation')
MyDat
runApp('R/Visualisation/Project Visualisation')
runApp('R/Visualisation/Project Visualisation')
if (interactive()) {shinyApp(ui, server)
}
if (interactive()) {shinyApp(ui, server)}
MyDat
colnames(MyDat)
list(colnames(MyDat))
runApp('R/Visualisation/Project Visualisation')
runApp('R/Visualisation/Project Visualisation')
runApp('R/Visualisation/Project Visualisation')
runApp('R/Visualisation/Project Visualisation')
runApp('R/Visualisation/Project Visualisation')
runApp('R/Visualisation/Project Visualisation')
runApp('R/Visualisation/Project Visualisation')
runApp('R/Visualisation/Project Visualisation')
runApp('R/Visualisation/Project Visualisation')
runApp('R/Visualisation/Project Visualisation')
runApp('R/Visualisation/Project Visualisation')
runApp('R/Visualisation/Project Visualisation')
runApp('R/Visualisation/Project Visualisation')
runApp()
runApp('R/Visualisation/Project Visualisation')
runApp()
runApp()
runApp('R/Visualisation/Project Visualisation')
runApp('R/Visualisation/Project Visualisation')
runApp('R/Visualisation/Project Visualisation')
runApp()
runApp('R/Visualisation/Project Visualisation')
runApp()
runApp()
runApp('R/Visualisation/Project Visualisation')
runApp()
runApp('R/Visualisation/Project Visualisation')
runApp('R/Visualisation/Project Visualisation')
runApp('R/Visualisation/Project Visualisation')
runApp('R/Visualisation/Project Visualisation')
runApp('R/Visualisation/Project Visualisation')
runApp('R/Visualisation/Project Visualisation')
runApp('R/Visualisation/Project Visualisation')
runApp('R/Visualisation/Project Visualisation')
runApp('R/Visualisation/Project Visualisation')
runApp('R/Visualisation/Project Visualisation')
runApp('R/Visualisation/Project Visualisation')
runApp('R/Visualisation/Project Visualisation')
runApp('R/Visualisation/Project Visualisation')
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shinyApp(ui, server)
shinyServer (function (input , output){
################### Input of the data from a csv ##########################
output$contents <- renderTable({
file <- input$file1
ext <- tools::file_ext(file$datapath)
req(file)
validate(need(ext == "csv", "Please upload a csv file"))
read.csv(file$datapath, header = input$header)
})
############## info of csv ##########
output$head <- renderTable({
head(contents(), n = input$n)
})
output$tail <- renderTable({
tail(contents(), n =input$n)
})
output$nrow <- renderPrint({
cat("Nombre des lignes/observation de la dataset :", nrow(contents()))
})
output$ncol <- renderPrint({
cat("\n Nombre de variables dans la dataset :", ncol(contents()))
})
############### Summary of dataset ###########
output$Summary <- renderPrint({
summary(contents())
})
##############  Plots ############
output$Plot <- renderPlot({
plot(MyDat$V2, MyDat$V3)
})
}
)
shinyApp(ui, server)
shinyApp(ui, shinyServer)
shinyApp(shinyUI, shinyServer)
runApp()
runApp()
server <- function(input, output) {
output$contents <- renderTable({
file <- input$file1
ext <- tools::file_ext(file$datapath)
req(file)
validate(need(ext == "csv", "Please upload a csv file"))
read.csv(file$datapath, header = input$header)
})
}
runApp('~/R/Visualisation')
runApp()
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp()
runApp()
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp()
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp()
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp()
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp()
runApp('~/R/Visualisation')
runApp()
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp()
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
str(dataset_ozone)
dataset_ozone <- read.csv("C:\\Users\\ZENBOOK\\Documents\\R\\Visualisation\\ozone.csv", header = TRUE, sep=";")
str(dataset_ozone)
runApp('~/R/Visualisation')
runApp()
runApp('~/R/Visualisation')
runApp()
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp()
runApp('~/R/Visualisation')
runApp()
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp()
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp()
runApp('~/R/Visualisation')
runApp()
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
gc()
gc()
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp()
runApp('~/R/Visualisation')
runApp()
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp()
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
runApp('~/R/Visualisation')
shiny::runApp()
runApp('~/R/Visualisation')
